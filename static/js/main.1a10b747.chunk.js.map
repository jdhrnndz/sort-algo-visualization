{"version":3,"sources":["utils/partialShuffle.js","sorters/bubbleSort.js","sorters/combSort.js","sorters/insertionSort.js","sorters/quickSortLomuto.js","sorters/selectionSort.js","sorters/index.js","hooks/usePrevious.js","App.js","serviceWorker.js","index.js"],"names":["partialShuffle","array","itemCount","PARTIAL_SHUFFLE_FACTOR","Math","floor","sqrt","len","length","i","minIndex","maxIndex","newIndex","random","a","bubbleSort","values","swapped","j","swap","firstIdx","secondIdx","combSort","n","gap","getNextGap","nextGap","insertionSort","key","quickSortLomuto","_quickSortLomuto","_partitionLomuto","left","right","partitionGenerator","result","next","done","idx","value","pivot","selectionSort","minIdx","sorters","bubblesort","title","fn","combsort","insertionsort","selectionsort","usePrevious","ref","useRef","useEffect","current","TILE_PER_ROW","window","innerWidth","ROW_COUNT","innerHeight","draw","canvasRef","sort","setRequestId","context","getContext","alert","fillStyle","fillRect","requestId","requestAnimationFrame","App","React","number","initialData","Array","from","item","useState","sortAlgo","setSortAlgo","prevRequestId","cancelAnimationFrame","options","push","className","name","id","onChange","e","target","width","height","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.1a10b747.chunk.js","sourcesContent":["const partialShuffle = (array, itemCount) => {\n  const PARTIAL_SHUFFLE_FACTOR = Math.floor(Math.sqrt(itemCount));\n  const len = array.length;\n\n  for (\n    let i = 0, minIndex = 0, maxIndex = PARTIAL_SHUFFLE_FACTOR;\n    i < len;\n    i++\n  ) {\n    let newIndex =\n      (Math.floor(Math.random() * PARTIAL_SHUFFLE_FACTOR) + minIndex) %\n      itemCount;\n    let a = array[newIndex];\n    array[newIndex] = array[i];\n    array[i] = a;\n    if (i === maxIndex) {\n      minIndex += PARTIAL_SHUFFLE_FACTOR;\n      maxIndex += PARTIAL_SHUFFLE_FACTOR;\n    }\n  }\n  return array;\n};\n\nexport default partialShuffle;\n","function* bubbleSort(values) {\n  let swapped = false;\n  for (let i = 0; i < values.length; i++) {\n    for (let j = 0; j < values.length - i - 1; j++) {\n      if (values[j] > values[j + 1]) {\n        swap(values, j, j + 1);\n        swapped = true;\n      }\n      yield values;\n    }\n\n    if (!swapped) {\n      return;\n    }\n  }\n}\n\nfunction swap(array, firstIdx, secondIdx) {\n  [array[firstIdx], array[secondIdx]] = [array[secondIdx], array[firstIdx]];\n}\n\nexport default bubbleSort;\n","function* combSort(values) {\n  let n = values.length;\n  let gap = n;\n  let swapped = true;\n  while (gap !== 1 || swapped) {\n    gap = getNextGap(gap);\n    swapped = false;\n    for (let i = 0; i < n - gap; i++) {\n      if (values[i] > values[i + gap]) {\n        [values[i], values[i + gap]] = [values[i + gap], values[i]];\n        yield values;\n        swapped = true;\n      }\n    }\n  }\n}\n\nconst getNextGap = gap => {\n  let nextGap = (gap * 10) / 13;\n  if (nextGap < 1) return 1;\n  return nextGap;\n};\n\nexport default combSort;\n","function* insertionSort(values) {\n  for (let i = 1; i < values.length; i++) {\n    let key = values[i];\n    let j = i - 1;\n    while (j >= 0 && values[j] > key) {\n      values[j + 1] = values[j];\n      j = j - 1;\n      yield values;\n    }\n    values[j + 1] = key;\n    yield values;\n  }\n}\n\nexport default insertionSort;\n","function* quickSortLomuto(values) {\n  yield* _quickSortLomuto(values, 0, values.length - 1);\n}\n\nfunction* _quickSortLomuto(values, left, right) {\n  if (left >= right) {\n    return;\n  }\n  let partitionGenerator = _partitionLomuto(values, left, right);\n\n  let result = partitionGenerator.next();\n  while (!result.done) {\n    result = partitionGenerator.next();\n    yield values;\n  }\n\n  let idx = result.value;\n  yield* _quickSortLomuto(values, left, idx - 1);\n  yield* _quickSortLomuto(values, idx + 1, right);\n}\n\nfunction* _partitionLomuto(values, left, right) {\n  let pivot = values[right];\n  let i = left - 1;\n  for (let j = left; j < right; j++) {\n    if (values[j] < pivot) {\n      swap(values, ++i, j);\n      yield;\n    }\n  }\n  swap(values, i + 1, right);\n  yield;\n  return i + 1;\n}\n\nfunction swap(array, firstIdx, secondIdx) {\n  [array[firstIdx], array[secondIdx]] = [array[secondIdx], array[firstIdx]];\n}\n\nexport default quickSortLomuto;\n","function* selectionSort(values) {\n  for (let i = 0; i < values.length - 1; i++) {\n    let minIdx = i;\n    for (let j = i + 1; j < values.length; j++) {\n      if (values[j] < values[minIdx]) {\n        minIdx = j;\n      }\n    }\n    swap(values, i, minIdx);\n    yield values;\n  }\n}\n\nfunction swap(array, firstIdx, secondIdx) {\n  [array[firstIdx], array[secondIdx]] = [array[secondIdx], array[firstIdx]];\n}\n\nexport default selectionSort;\n","import bubbleSort from './bubbleSort';\nimport combSort from './combSort';\nimport insertionSort from './insertionSort';\nimport quickSortLomuto from './quickSortLomuto';\nimport selectionSort from './selectionSort';\n\nconst sorters = {\n  bubblesort: {\n    title: 'Bubble Sort',\n    fn: bubbleSort,\n  },\n  combsort: {\n    title: 'Comb Sort',\n    fn: combSort,\n  },\n  insertionsort: {\n    title: 'Insertion Sort',\n    fn: insertionSort,\n  },\n  quickSortLomuto: {\n    title: 'Quick Sort (Lomuto)',\n    fn: quickSortLomuto,\n  },\n  selectionsort: {\n    title: 'Selection Sort',\n    fn: selectionSort,\n  },\n};\n\nexport default sorters;\n","import { useRef, useEffect } from 'react';\n\nconst usePrevious = value => {\n  const ref = useRef();\n  useEffect(() => {\n    ref.current = value;\n  }, [value]);\n  return ref.current;\n};\n\nexport default usePrevious;\n","import React from 'react';\nimport './App.css';\nimport partialShuffle from './utils/partialShuffle';\nimport sorters from './sorters';\nimport usePrevious from './hooks/usePrevious';\n\nconst TILE_SIZE = 25;\nconst TILE_PER_ROW = Math.floor(window.innerWidth / TILE_SIZE);\nconst ROW_COUNT = Math.floor(window.innerHeight / TILE_SIZE);\n\nfunction App() {\n  let canvasRef = React.useRef(null);\n  let number = 0;\n  const initialData = partialShuffle(\n    Array.from(Array(TILE_PER_ROW), item => number++),\n    TILE_PER_ROW\n  );\n  const [sortAlgo, setSortAlgo] = React.useState('combsort');\n  const [requestId, setRequestId] = React.useState(null);\n  const prevRequestId = usePrevious(requestId);\n\n  React.useEffect(() => {\n    let sort = sorters[sortAlgo].fn(initialData);\n\n    window.cancelAnimationFrame(prevRequestId);\n\n    draw(canvasRef, sort, setRequestId)();\n  }, [sortAlgo]);\n\n  const options = [];\n\n  for (const key in sorters) {\n    options.push(<option value={key}>{sorters[key].title}</option>);\n  }\n\n  return (\n    <div className=\"App\">\n      <div className=\"App-content\">\n        <select\n          name=\"sort-algo\"\n          id=\"sort-algo-select\"\n          value={sortAlgo}\n          onChange={e => setSortAlgo(e.target.value)}\n        >\n          {options}\n        </select>\n        <canvas\n          ref={canvasRef}\n          width={window.innerWidth}\n          height={window.innerHeight}\n        />\n      </div>\n    </div>\n  );\n}\n\nconst draw = (canvasRef, sort, setRequestId) => () => {\n  const canvas = canvasRef.current;\n  const context = canvas.getContext('2d');\n\n  const result = sort.next();\n\n  if (result.done) {\n    alert('done!');\n    return;\n  }\n\n  for (let i = 0; i < ROW_COUNT; i++) {\n    for (let j = 0; j < TILE_PER_ROW; j++) {\n      context.fillStyle = `hsl(${(result.value[j] / TILE_PER_ROW) *\n        360}, 100%, 50%)`;\n      context.fillRect(j * TILE_SIZE, i * TILE_SIZE, TILE_SIZE, TILE_SIZE);\n    }\n  }\n\n  let requestId = requestAnimationFrame(draw(canvasRef, sort, setRequestId));\n  setRequestId(requestId);\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}