{"version":3,"sources":["utils/partialShuffle.js","utils/swap.js","utils/randomShuffle.js","sorters/bogoSort.js","sorters/bubbleSort.js","sorters/combSort.js","sorters/heapSort.js","sorters/insertionSort.js","sorters/mergeSort.js","sorters/quickSortHoare.js","sorters/quickSortLomuto.js","sorters/radixSortLSD.js","sorters/selectionSort.js","sorters/shellSort.js","sorters/index.js","components/Animation.js","components/SquareCanvas.js","components/CircleCanvas.js","components/HexCanvas.js","App.js","serviceWorker.js","index.js"],"names":["partialShuffle","array","len","length","PARTIAL_SHUFFLE_FACTOR","Math","floor","sqrt","i","minIndex","maxIndex","newIndex","random","a","swap","firstIdx","secondIdx","randomShuffle","values","bogoSort","isSorted","bubbleSort","swapped","j","combSort","n","gap","getNextGap","nextGap","heapSort","heapify","arr","largest","right","left","insertionSort","key","mergeSort","_mergeSort","_merge","l","r","m","n1","n2","L","Array","R","k","quickSortHoare","_quickSortHoare","_partitionHoare","partitionGenerator","result","next","done","idx","value","pivotIdx","pivot","quickSortLomuto","_quickSortLomuto","_partitionLomuto","radixSortLSD","counter","fill","radix","max","parseInt","selectionSort","minIdx","shellSort","tmp","sorters","title","fn","bubblesort","combsort","insertionsort","selectionsort","Animation","props","requestFrameRef","React","useRef","useState","data","setData","updateAnimationState","useCallback","results","finishedSorter","forEach","sorter","index","current","requestAnimationFrame","useEffect","cancelAnimationFrame","canvas","JSON","stringify","draw","canvasRef","size","datasetCount","parse","context","getContext","save","imageSmoothingEnabled","dataCount","fillStyle","fillRect","restore","SquareCanvas","tileSize","ref","width","window","innerWidth","height","innerHeight","strokeStyle","halfSize","paddedSize","fullCircle","PI","rem","beginPath","arc","stroke","hexSubpath","hexSVG","hexPath","Path2D","TILE_PER_ROW","TILE_SIZE","ROW_COUNT","ARRANGEMENTS","reverse","partial","CANVASES","square","component","circle","CircleCanvas","hex","HexCanvas","setupSorters","algo","arrangement","itemCount","sorterCollection","push","generateInitialData","count","number","from","item","App","sortAlgo","setSortAlgo","setArrangement","shape","algoOptions","arrangementOptions","canvasOptions","className","name","id","onChange","e","target","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.e63a5d4b.chunk.js","sourcesContent":["const partialShuffle = array => {\n  const len = array.length;\n  const PARTIAL_SHUFFLE_FACTOR = Math.floor(Math.sqrt(len));\n\n  for (\n    let i = 0, minIndex = 0, maxIndex = PARTIAL_SHUFFLE_FACTOR;\n    i < len;\n    i++\n  ) {\n    let newIndex =\n      (Math.floor(Math.random() * PARTIAL_SHUFFLE_FACTOR) + minIndex) % len;\n    let a = array[newIndex];\n    array[newIndex] = array[i];\n    array[i] = a;\n    if (i === maxIndex) {\n      minIndex += PARTIAL_SHUFFLE_FACTOR;\n      maxIndex += PARTIAL_SHUFFLE_FACTOR;\n    }\n  }\n  return array;\n};\n\nexport default partialShuffle;\n","function swap(array, firstIdx, secondIdx) {\n  [array[firstIdx], array[secondIdx]] = [array[secondIdx], array[firstIdx]];\n}\n\nexport default swap;\n","import swap from './swap';\n\nfunction randomShuffle(values) {\n  const len = values.length;\n  for (let i = 0; i < len; i++) {\n    const newIndex = Math.floor(Math.random() * len);\n    swap(values, i, newIndex);\n  }\n\n  return values;\n}\n\nexport default randomShuffle;\n","import randomShuffle from '../utils/randomShuffle';\n\nfunction* bogoSort(values) {\n  while (!isSorted(values)) {\n    randomShuffle(values, true);\n    yield values;\n  }\n}\n\nfunction isSorted(values) {\n  for (let i = 0; i < values.length - 1; i++) {\n    if (values[i] > values[i + 1]) return false;\n  }\n  return true;\n}\n\nexport default bogoSort;\n","import swap from '../utils/swap';\n\nfunction* bubbleSort(values) {\n  let swapped = false;\n  for (let i = 0; i < values.length; i++) {\n    for (let j = 0; j < values.length - i - 1; j++) {\n      if (values[j] > values[j + 1]) {\n        swap(values, j, j + 1);\n        swapped = true;\n      }\n      yield values;\n    }\n\n    if (!swapped) {\n      return;\n    }\n  }\n}\n\nexport default bubbleSort;\n","function* combSort(values) {\n  let n = values.length;\n  let gap = n;\n  let swapped = true;\n  while (gap !== 1 || swapped) {\n    gap = getNextGap(gap);\n    swapped = false;\n    for (let i = 0; i < n - gap; i++) {\n      if (values[i] > values[i + gap]) {\n        [values[i], values[i + gap]] = [values[i + gap], values[i]];\n        yield values;\n        swapped = true;\n      }\n    }\n  }\n}\n\nconst getNextGap = gap => {\n  let nextGap = (gap * 10) / 13;\n  if (nextGap < 1) return 1;\n  return nextGap;\n};\n\nexport default combSort;\n","import swap from '../utils/swap';\n\nfunction* heapSort(arr) {\n  for (let i = arr.length; i >= 0; i--) {\n    yield* heapify(arr, arr.length, i);\n  }\n\n  for (let i = arr.length - 1; i > 0; i--) {\n    swap(arr, i, 0);\n    yield arr;\n    yield* heapify(arr, i, 0);\n  }\n}\n\nfunction* heapify(arr, n, i) {\n  let largest = i;\n  const left = 2 * i + 1;\n  const right = 2 * i + 2;\n\n  if (left < n && arr[largest] < arr[left]) largest = left;\n  if (right < n && arr[largest] < arr[right]) largest = right;\n  if (largest !== i) {\n    swap(arr, i, largest);\n    yield arr;\n    yield* heapify(arr, n, largest);\n  }\n}\n\nexport default heapSort;\n","function* insertionSort(values) {\n  for (let i = 1; i < values.length; i++) {\n    let key = values[i];\n    let j = i - 1;\n    while (j >= 0 && values[j] > key) {\n      values[j + 1] = values[j];\n      j = j - 1;\n      yield values;\n    }\n    values[j + 1] = key;\n    yield values;\n  }\n}\n\nexport default insertionSort;\n","function* mergeSort(values) {\n  yield* _mergeSort(values, 0, values.length - 1);\n}\n\nfunction* _mergeSort(values, l, r) {\n  if (l >= r) return;\n  const m = l + Math.floor((r - l) / 2);\n  yield* _mergeSort(values, l, m);\n  yield* _mergeSort(values, m + 1, r);\n  yield* _merge(values, l, m, r);\n}\n\nfunction* _merge(values, l, m, r) {\n  const n1 = m - l + 1;\n  const n2 = r - m;\n  let L = new Array(n1);\n  let R = new Array(n2);\n\n  for (let i = 0; i < n1; i++) L[i] = values[l + i];\n  for (let j = 0; j < n2; j++) R[j] = values[m + 1 + j];\n\n  let i = 0;\n  let j = 0;\n  let k = l;\n\n  while (i < n1 && j < n2) {\n    if (L[i] < R[j]) values[k++] = L[i++];\n    else values[k++] = R[j++];\n    yield values;\n  }\n\n  while (i < n1) {\n    values[k++] = L[i++];\n    yield values;\n  }\n\n  while (j < n2) {\n    values[k++] = R[j++];\n    yield values;\n  }\n}\n\nexport default mergeSort;\n","import swap from '../utils/swap';\n\nfunction* quickSortHoare(values) {\n  yield* _quickSortHoare(values, 0, values.length - 1);\n}\n\nfunction* _quickSortHoare(values, left, right) {\n  if (left >= right) {\n    return;\n  }\n  let partitionGenerator = _partitionHoare(values, left, right);\n\n  let result = partitionGenerator.next();\n  while (!result.done) {\n    result = partitionGenerator.next();\n    yield values;\n  }\n\n  let idx = result.value;\n  yield* _quickSortHoare(values, left, idx);\n  yield* _quickSortHoare(values, idx + 1, right);\n}\n\nfunction* _partitionHoare(values, left, right) {\n  let pivotIdx = left + Math.floor((right - left) / 2);\n  let pivot = values[pivotIdx];\n  while (true) {\n    while (values[left] < pivot) left++;\n    while (values[right] > pivot) right--;\n    if (left >= right) return right;\n    swap(values, left++, right--);\n    yield;\n  }\n}\n\nexport default quickSortHoare;\n","import swap from '../utils/swap';\n\nfunction* quickSortLomuto(values) {\n  yield* _quickSortLomuto(values, 0, values.length - 1);\n}\n\nfunction* _quickSortLomuto(values, left, right) {\n  if (left >= right) {\n    return;\n  }\n  let partitionGenerator = _partitionLomuto(values, left, right);\n\n  let result = partitionGenerator.next();\n  while (!result.done) {\n    result = partitionGenerator.next();\n    yield values;\n  }\n\n  let idx = result.value;\n  yield* _quickSortLomuto(values, left, idx - 1);\n  yield* _quickSortLomuto(values, idx + 1, right);\n}\n\nfunction* _partitionLomuto(values, left, right) {\n  let pivot = values[right];\n  let i = left - 1;\n  for (let j = left; j < right; j++) {\n    if (values[j] < pivot) {\n      swap(values, ++i, j);\n      yield;\n    }\n  }\n  swap(values, i + 1, right);\n  yield;\n  return i + 1;\n}\n\nexport default quickSortLomuto;\n","function* radixSortLSD(array) {\n  let values = [...array];\n  let counter = new Array(10).fill(0);\n  let n = values.length;\n  let radix = 1;\n  let max = Math.max(...array);\n\n  while (radix < max) {\n    for (let i = 0; i < n; i++) {\n      counter[parseInt(values[i] / radix) % 10]++;\n    }\n\n    for (let i = 1; i < counter.length; i++) {\n      counter[i] = counter[i] + counter[i - 1];\n    }\n\n    for (let i = n - 1; i >= 0; i--) {\n      array[--counter[parseInt(values[i] / radix) % 10]] = values[i];\n      yield array;\n    }\n\n    values = [...array];\n    counter.fill(0, 0);\n\n    radix *= 10;\n  }\n}\n\nexport default radixSortLSD;\n","import swap from '../utils/swap';\n\nfunction* selectionSort(values) {\n  for (let i = 0; i < values.length - 1; i++) {\n    let minIdx = i;\n    for (let j = i + 1; j < values.length; j++) {\n      if (values[j] < values[minIdx]) {\n        minIdx = j;\n      }\n    }\n    swap(values, i, minIdx);\n    yield values;\n  }\n}\n\nexport default selectionSort;\n","function* shellSort(values) {\n  let n = values.length;\n  for (let gap = Math.floor(n / 2); gap > 0; gap = Math.floor(gap / 2)) {\n    for (let i = gap; i < n; i++) {\n      let tmp = values[i];\n      let j = i;\n      for (j = i; j >= gap && values[j - gap] > tmp; j -= gap) {\n        values[j] = values[j - gap];\n        yield values;\n      }\n      values[j] = tmp;\n      yield values;\n    }\n  }\n}\n\nexport default shellSort;\n","import bogoSort from './bogoSort';\nimport bubbleSort from './bubbleSort';\nimport combSort from './combSort';\nimport heapSort from './heapSort';\nimport insertionSort from './insertionSort';\nimport mergeSort from './mergeSort';\nimport quickSortHoare from './quickSortHoare';\nimport quickSortLomuto from './quickSortLomuto';\nimport radixSortLSD from './radixSortLSD';\nimport selectionSort from './selectionSort';\nimport shellSort from './shellSort';\n\nconst sorters = {\n  bogoSort: {\n    title: 'Bogo Sort',\n    fn: bogoSort,\n  },\n  bubblesort: {\n    title: 'Bubble Sort',\n    fn: bubbleSort,\n  },\n  combsort: {\n    title: 'Comb Sort',\n    fn: combSort,\n  },\n  heapSort: {\n    title: 'Heap Sort',\n    fn: heapSort,\n  },\n  insertionsort: {\n    title: 'Insertion Sort',\n    fn: insertionSort,\n  },\n  mergeSort: {\n    title: 'Merge Sort',\n    fn: mergeSort,\n  },\n  quickSortHoare: {\n    title: 'Quick Sort (Hoare)',\n    fn: quickSortHoare,\n  },\n  quickSortLomuto: {\n    title: 'Quick Sort (Lomuto)',\n    fn: quickSortLomuto,\n  },\n  radixSortLSD: {\n    title: 'Radix Sort (LSD)',\n    fn: radixSortLSD,\n  },\n  selectionsort: {\n    title: 'Selection Sort',\n    fn: selectionSort,\n  },\n  shellSort: {\n    title: 'Shell Sort',\n    fn: shellSort,\n  },\n};\n\nexport default sorters;\n","import React from 'react';\n\nfunction Animation(props) {\n  const requestFrameRef = React.useRef();\n  const [data, setData] = React.useState([]);\n\n  const updateAnimationState = React.useCallback(() => {\n    const results = [];\n    let finishedSorter = 0;\n    props.sorters.forEach((sorter, index) => {\n      const result = sorter.next();\n\n      if (!result.done) {\n        results[index] = result.value;\n      } else {\n        finishedSorter++;\n      }\n    });\n\n    if (finishedSorter < props.sorters.length) {\n      setData(results);\n      requestFrameRef.current = requestAnimationFrame(updateAnimationState);\n    }\n  }, [props.sorters]);\n\n  React.useEffect(() => {\n    requestFrameRef.current = requestAnimationFrame(updateAnimationState);\n    return () => cancelAnimationFrame(requestFrameRef.current);\n  }, [updateAnimationState]);\n\n  return props.canvas(JSON.stringify(data));\n}\n\nexport default Animation;\n","import React from 'react';\n\nfunction SquareCanvas(props) {\n  let canvasRef = React.useRef(null);\n\n  React.useEffect(() => {\n    draw(canvasRef, props.data, props.tileSize);\n  });\n\n  return (\n    <div>\n      <canvas\n        ref={canvasRef}\n        width={window.innerWidth}\n        height={window.innerHeight}\n      />\n    </div>\n  );\n}\n\nconst draw = (canvasRef, data, size) => {\n  if (!data || data.length <= 0) return;\n\n  data = JSON.parse(data);\n  const datasetCount = data.length;\n\n  const canvas = canvasRef.current;\n  const context = canvas.getContext('2d');\n\n  context.save();\n  context.imageSmoothingEnabled = true;\n\n  for (let i = 0; i < datasetCount; i++) {\n    if (!data[i]) continue;\n\n    const dataCount = data[i].length;\n\n    for (let j = 0; j < dataCount; j++) {\n      context.fillStyle = `hsl(${(data[i][j] / dataCount) * 320}, 65%, 55%)`;\n      context.fillRect(j * size, i * size, size, size);\n    }\n  }\n\n  context.restore();\n};\n\nexport default SquareCanvas;\n","import React from 'react';\n\nfunction SquareCanvas(props) {\n  let canvasRef = React.useRef(null);\n\n  React.useEffect(() => {\n    draw(canvasRef, props.data, props.tileSize);\n  });\n\n  return (\n    <div>\n      <canvas\n        ref={canvasRef}\n        width={window.innerWidth}\n        height={window.innerHeight}\n      />\n    </div>\n  );\n}\n\nconst draw = (canvasRef, data, size) => {\n  if (!data || data.length <= 0) return;\n\n  data = JSON.parse(data);\n  const datasetCount = data.length;\n\n  const canvas = canvasRef.current;\n  const context = canvas.getContext('2d');\n\n  context.save();\n  context.imageSmoothingEnabled = true;\n  context.strokeStyle = 'white';\n\n  const halfSize = size / 2;\n  const paddedSize = halfSize - 2;\n  const fullCircle = 2 * Math.PI;\n\n  for (let i = 0; i < datasetCount; i++) {\n    if (!data[i]) continue;\n\n    const dataCount = data[i].length;\n    const rem = i % 2;\n\n    for (let j = 0; j < dataCount; j++) {\n      context.beginPath();\n      context.arc(\n        j * size + halfSize * rem,\n        i * size + halfSize,\n        paddedSize,\n        0,\n        fullCircle\n      );\n      context.stroke();\n      context.fillStyle = `hsl(${(data[i][j] / dataCount) * 320}, 65%, 55%)`;\n      context.fill();\n    }\n  }\n\n  context.restore();\n};\n\nexport default SquareCanvas;\n","import React from 'react';\n\nfunction SquareCanvas(props) {\n  let canvasRef = React.useRef(null);\n\n  React.useEffect(() => {\n    draw(canvasRef, props.data, props.tileSize);\n  });\n\n  return (\n    <div>\n      <canvas\n        ref={canvasRef}\n        width={window.innerWidth}\n        height={window.innerHeight}\n      />\n    </div>\n  );\n}\n\nconst draw = (canvasRef, data, size) => {\n  if (!data || data.length <= 0) return;\n\n  data = JSON.parse(data);\n  const datasetCount = data.length;\n\n  const canvas = canvasRef.current;\n  const context = canvas.getContext('2d');\n\n  context.save();\n  context.imageSmoothingEnabled = true;\n  context.strokeStyle = 'white';\n\n  const halfSize = size / 2;\n  const hexSubpath = `l -${halfSize} ${halfSize} v ${halfSize} l ${halfSize} ${halfSize} l ${halfSize} -${halfSize} v -${halfSize} Z`;\n\n  for (let i = 0; i < datasetCount; i++) {\n    if (!data[i]) continue;\n\n    const dataCount = data[i].length;\n    const rem = i % 2;\n\n    for (let j = 0; j < dataCount; j++) {\n      const hexSVG = `M${j * size + halfSize * rem} ${i * size} ${hexSubpath}`;\n      const hexPath = new Path2D(hexSVG);\n\n      context.beginPath();\n      context.fillStyle = `hsl(${(data[i][j] / dataCount) * 320}, 65%, 55%)`;\n      context.fill(hexPath);\n      context.stroke(hexPath);\n    }\n  }\n\n  context.restore();\n};\n\nexport default SquareCanvas;\n","import React from 'react';\nimport './App.css';\nimport partialShuffle from './utils/partialShuffle';\nimport sorters from './sorters';\nimport Animation from './components/Animation';\nimport SquareCanvas from './components/SquareCanvas';\nimport CircleCanvas from './components/CircleCanvas';\nimport HexCanvas from './components/HexCanvas';\nimport randomShuffle from './utils/randomShuffle';\n\nconst TILE_PER_ROW = 80;\nconst TILE_SIZE = window.innerWidth / TILE_PER_ROW;\nconst ROW_COUNT = Math.floor(window.innerHeight / TILE_SIZE);\n\nconst ARRANGEMENTS = {\n  random: {\n    title: 'Random',\n    fn: randomShuffle,\n  },\n  reverse: {\n    title: 'Reverse Sorted',\n    fn: array => array.reverse(),\n  },\n  partial: {\n    title: 'Partially Sorted',\n    fn: partialShuffle,\n  },\n};\n\nconst CANVASES = {\n  square: {\n    title: 'Square',\n    component: props => <SquareCanvas {...props} />,\n  },\n  circle: {\n    title: 'Circle',\n    component: props => <CircleCanvas {...props} />,\n  },\n  hex: {\n    title: 'Hexagon',\n    component: props => <HexCanvas {...props} />,\n  },\n};\n\nfunction App() {\n  const [sortAlgo, setSortAlgo] = React.useState('combsort');\n  const [arrangement, setArrangement] = React.useState('random');\n  const [shape, setShape] = React.useState('square');\n\n  const algoOptions = [];\n  for (const key in sorters) {\n    algoOptions.push(\n      <option value={key} key={sorters[key].title}>\n        {sorters[key].title}\n      </option>\n    );\n  }\n\n  const arrangementOptions = [];\n  for (const key in ARRANGEMENTS) {\n    arrangementOptions.push(\n      <option value={key} key={ARRANGEMENTS[key].title}>\n        {ARRANGEMENTS[key].title}\n      </option>\n    );\n  }\n\n  const canvasOptions = [];\n  for (const key in CANVASES) {\n    canvasOptions.push(\n      <option value={key} key={CANVASES[key].title}>\n        {CANVASES[key].title}\n      </option>\n    );\n  }\n\n  return (\n    <div className=\"App\">\n      <div className=\"App-content\">\n        <div className=\"Banner\">\n          <div className=\"Banner-content\">\n            A visualization of <em>sorts</em>\n          </div>\n          <div>\n            <span>using</span>\n            <select\n              name=\"sort-algo\"\n              id=\"sort-algo-select\"\n              value={sortAlgo}\n              onChange={e => setSortAlgo(e.target.value)}\n            >\n              {algoOptions}\n            </select>\n          </div>\n          <div>\n            <span className=\"Banner-content\">with</span>\n            <select\n              name=\"arrangement\"\n              id=\"arrangement-select\"\n              value={arrangement}\n              onChange={e => setArrangement(e.target.value)}\n            >\n              {arrangementOptions}\n            </select>\n            <span className=\"Banner-content\">data</span>\n          </div>\n        </div>\n        <Animation\n          sorters={setupSorters(sortAlgo, arrangement, ROW_COUNT, TILE_PER_ROW)}\n          canvas={data =>\n            CANVASES[shape].component({ tileSize: TILE_SIZE, data: data })\n          }\n        />\n      </div>\n    </div>\n  );\n}\n\nfunction setupSorters(algo, arrangement, datasetCount, itemCount) {\n  const sorterCollection = [];\n\n  for (let i = 0; i < datasetCount; i++) {\n    sorterCollection.push(\n      sorters[algo].fn([...generateInitialData(arrangement, itemCount)])\n    );\n  }\n\n  return sorterCollection;\n}\n\nfunction generateInitialData(arrangement, count) {\n  let number = 0;\n  const initialData = ARRANGEMENTS[arrangement].fn(\n    Array.from(Array(count), item => number++)\n  );\n\n  return initialData;\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}